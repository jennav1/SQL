#In this data, I'm querying a database with multiple tables in it to quantify statistics about customer and order data.

--Select 20 rows of data from the customers table.--
SELECT * FROM BIT_DB.customers LIMIT 20;

--Select 20 rows of data from the January Sales table.--
SELECT * FROM BIT_DB.JanSales LIMIT 20;

--How many orders were placed in January?--
SELECT COUNT(orderID)
FROM BIT_DB.JanSales;

--How many orders were placed for an iPhone in January?--
SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE Product = 'iPhone';

--Select 20 rows of data from the the February Sales table.--
SELECT * FROM BIT_DB.FebSales LIMIT 20;

--Select the customer account numbers for all the orders placed in February.--
SELECT acctnum
FROM BIT_DB.customers
INNER JOIN BIT_DB.FebSales
ON customers.order_id = FebSales.orderID;

--Which product was the cheapest one sold in January and what was the price?--
SELECT DISTINCT product, MIN(price) 
FROM BIT_DB.JanSales Jan 
GROUP BY product, price 
ORDER BY price ASC LIMIT 1;
--Option #2--
SELECT DISTINCT product, price 
FROM BIT_DB.JanSales 
ORDER BY price ASC LIMIT 1;

--What is the total revenue for each product sold in January?--
SELECT Product, SUM(quantity)*price AS total_revenue
FROM BIT_DB.JanSales
GROUP BY Product;

--Which products were sold in February at 548 Lincoln St, Seattle, WA, how many of each were sold, and what was the total revenue?--
SELECT Product, SUM(Quantity), SUM(Quantity) * price AS total_revenue
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY product;

--How many customers ordered more than 2 products at a time in February and what was the average amount spent for those customers?--
SELECT COUNT(cust.acctnum), AVG(quantity)*price
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON Feb.orderID = cust.order_id
WHERE Feb.Quantity > 2;

--Count how many orders each customer made where they ordered more than 2 products at a time in February.--
SELECT cust.acctnum, count(Feb.orderid)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id
WHERE Feb.Quantity>2
and cust.acctnum is not null
GROUP BY cust.acctnum
ORDER BY
count(Feb.orderid) DESC;

--Select orders made between 02/13/19 00.00 and 02/18/19 00.00.--
SELECT orderdate
FROM BIT_DB.FebSales
WHERE orderdate between '02/13/19 00.00' AND '02/18/19 00.00';

--What was the location where an order was made on 02/18/19 at 01:35.--
SELECT location
FROM BIT_DB.FebSales
WHERE orderdate = '02/18/19 01:35';

--How many products were sold on 02/18/19?--
SELECT SUM(quantity)
FROM BIT_DB.FebSales
WHERE orderdate like '02/18/19%';

--Which batteries were sold in February?--
SELECT DISTINCT Product
FROM BIT_DB.FebSales
WHERE Product like '%Batteries%';

--Select products which price include .99 in February.--
SELECT DISTINCT Product, Price
FROM BIT_DB.FebSales
WHERE price like '%.99';

--List all the products sold in Los Angeles in February, and how many of each were sold.--
SELECT Product, SUM(Quantity)
FROM BIT_DB.FebSales
WHERE location like '%Los Angeles%'
GROUP BY Product;

--How many locations are there in New York that sold more than 1 product in January?--
SELECT COUNT(DISTINCT location)
FROM BIT_DB.JanSales
WHERE location LIKE '%New York%'
AND quantity>1;

--How many of each type of headphone were sold in February?--
SELECT Product, SUM(quantity)
FROM BIT_DB.FebSales
WHERE Product LIKE '%headphone%'
GROUP BY Product;

--What was the average amount spent per account in February?--
SELECT SUM(Feb.Quantity*Feb.price)/count(cust.acctnum)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON Feb.orderID=cust.order_id;
--OR--
SELECT avg(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id;

--What was the average quantity of products purchased per account in February?--
SELECT SUM(Feb.Quantity)/COUNT(cust.acctnum)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON Feb.orderID=cust.order_id;

--Which product brought in the most revenue in January and how much revenue did it bring in total?
SELECT product, SUM(Quantity)*price AS Max_revenue
FROM BIT_DB.JanSales
GROUP BY product
ORDER BY Max_revenue DESC
LIMIT 1;
